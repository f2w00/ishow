{"version":3,"file":"js/916.dc98e412.js","mappings":"0KAuCCA,GAOA,MAAO,CAKNC,IAPDD,EAAMA,GAAO,IAAIE,IAehBC,GAAA,SAA6BC,EAAWC,GACvC,IAAMC,EAAmDN,EAAKO,IAAIH,GAC9DE,EACHA,EAASE,KAAKH,GAGdL,EAAKS,IAAIL,EAAM,CAACC,GAAA,EAWlBK,IAAA,SAA8BN,EAAWC,GACxC,IAAMC,EAAmDN,EAAKO,IAAIH,GAC9DE,IACCD,EACHC,EAASK,OAAOL,EAASM,QAAQP,KAAa,EAAG,GAGjDL,EAAKS,IAAIL,EAAM,MAelBS,KAAA,SAA+BT,EAAWC,GACzC,IAAIC,EAAWN,EAAKO,IAAIH,GACpBE,GACFA,EACCQ,QACAC,KAAI,SAACf,GACLA,EAAQK,EAAA,KAIXC,EAAWN,EAAKO,IAAI,OAElBD,EACCQ,QACAC,KAAI,SAACf,GACLA,EAAQI,EAAMC,EAAA,MChHpB,MAAMW,EAAUC,IAChB,O,yOCSA,MAAMC,GAAQC,EAAAA,EAAAA,MAERC,EAAmBA,KACvB,IAAIC,EACJ,CACEC,KAAM,SACNC,MAAO,GACPC,MAAO,EACPC,OAAQ,EACRC,MAAO,EACPC,KAAM,KACNC,OAAQ,CAAC,GAEPC,EAAeX,EAAMY,MAAMC,aAC/BF,EAAaF,KAAKnB,KAAKa,GACvBW,WAAWC,OAAOJ,EAAa,EAE3BK,EAAgBA,KACpB,IAAIb,EAAgB,CAClB,CACEC,KAAM,SACNC,MAAO,GACPC,MAAO,EACPC,OAAQ,EACRC,MAAO,EACPC,KAAM,GACNC,OAAQ,CAAC,IAETC,EAAeX,EAAMY,MAAMC,aAC/BF,EAAaF,KAAON,EACpBW,WAAWC,OAAOJ,EAAa,EAE3BM,EAAiBC,IACrBC,QAAQC,IAAIF,GACZ,IAAIP,EAAeX,EAAMY,MAAMC,aAC/BF,EAAaF,KAAOS,EACpBJ,WAAWC,OAAOJ,EAAa,E,OAIjCU,EAAAA,EAAAA,KAAU,KACRnB,IACAJ,EAAAA,EAAAA,GAAW,YAAY,KACrBkB,GAAe,IAEjBlB,EAAAA,EAAAA,GAAW,YAAaX,IACtB8B,EAAc9B,EAAE,IAElBW,EAAAA,EAAAA,GAAW,gBAAiBX,IAC1BgC,QAAQC,IAAI,OACZN,WAAWQ,SAAS,GACpB,I,0CCzDJ,MAAMC,EAAc,EAEpB,O","sources":["webpack://reportforms/../src/index.ts","webpack://reportforms/./src/unit/mittBus.js","webpack://reportforms/./src/components/Luckysheet.vue","webpack://reportforms/./src/components/Luckysheet.vue?a0a5"],"sourcesContent":["export type EventType = string | symbol;\n\n// An event handler can take an optional event argument\n// and should not return a value\nexport type Handler<T = unknown> = (event: T) => void;\nexport type WildcardHandler<T = Record<string, unknown>> = (\n\ttype: keyof T,\n\tevent: T[keyof T]\n) => void;\n\n// An array of all currently registered event handlers for a type\nexport type EventHandlerList<T = unknown> = Array<Handler<T>>;\nexport type WildCardEventHandlerList<T = Record<string, unknown>> = Array<WildcardHandler<T>>;\n\n// A map of event types and their corresponding event handlers.\nexport type EventHandlerMap<Events extends Record<EventType, unknown>> = Map<\n\tkeyof Events | '*',\n\tEventHandlerList<Events[keyof Events]> | WildCardEventHandlerList<Events>\n>;\n\nexport interface Emitter<Events extends Record<EventType, unknown>> {\n\tall: EventHandlerMap<Events>;\n\n\ton<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): void;\n\ton(type: '*', handler: WildcardHandler<Events>): void;\n\n\toff<Key extends keyof Events>(type: Key, handler?: Handler<Events[Key]>): void;\n\toff(type: '*', handler: WildcardHandler<Events>): void;\n\n\temit<Key extends keyof Events>(type: Key, event: Events[Key]): void;\n\temit<Key extends keyof Events>(type: undefined extends Events[Key] ? Key : never): void;\n}\n\n/**\n * Mitt: Tiny (~200b) functional event emitter / pubsub.\n * @name mitt\n * @returns {Mitt}\n */\nexport default function mitt<Events extends Record<EventType, unknown>>(\n\tall?: EventHandlerMap<Events>\n): Emitter<Events> {\n\ttype GenericEventHandler =\n\t\t| Handler<Events[keyof Events]>\n\t\t| WildcardHandler<Events>;\n\tall = all || new Map();\n\n\treturn {\n\n\t\t/**\n\t\t * A Map of event names to registered handler functions.\n\t\t */\n\t\tall,\n\n\t\t/**\n\t\t * Register an event handler for the given type.\n\t\t * @param {string|symbol} type Type of event to listen for, or `'*'` for all events\n\t\t * @param {Function} handler Function to call in response to given event\n\t\t * @memberOf mitt\n\t\t */\n\t\ton<Key extends keyof Events>(type: Key, handler: GenericEventHandler) {\n\t\t\tconst handlers: Array<GenericEventHandler> | undefined = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\thandlers.push(handler);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tall!.set(type, [handler] as EventHandlerList<Events[keyof Events]>);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Remove an event handler for the given type.\n\t\t * If `handler` is omitted, all handlers of the given type are removed.\n\t\t * @param {string|symbol} type Type of event to unregister `handler` from, or `'*'`\n\t\t * @param {Function} [handler] Handler function to remove\n\t\t * @memberOf mitt\n\t\t */\n\t\toff<Key extends keyof Events>(type: Key, handler?: GenericEventHandler) {\n\t\t\tconst handlers: Array<GenericEventHandler> | undefined = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\tif (handler) {\n\t\t\t\t\thandlers.splice(handlers.indexOf(handler) >>> 0, 1);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tall!.set(type, []);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Invoke all handlers for the given type.\n\t\t * If present, `'*'` handlers are invoked after type-matched handlers.\n\t\t *\n\t\t * Note: Manually firing '*' handlers is not supported.\n\t\t *\n\t\t * @param {string|symbol} type The event type to invoke\n\t\t * @param {Any} [evt] Any value (object is recommended and powerful), passed to each handler\n\t\t * @memberOf mitt\n\t\t */\n\t\temit<Key extends keyof Events>(type: Key, evt?: Events[Key]) {\n\t\t\tlet handlers = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\t(handlers as EventHandlerList<Events[keyof Events]>)\n\t\t\t\t\t.slice()\n\t\t\t\t\t.map((handler) => {\n\t\t\t\t\t\thandler(evt!);\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\thandlers = all!.get('*');\n\t\t\tif (handlers) {\n\t\t\t\t(handlers as WildCardEventHandlerList<Events>)\n\t\t\t\t\t.slice()\n\t\t\t\t\t.map((handler) => {\n\t\t\t\t\t\thandler(type, evt!);\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n}\n","import mitt from 'mitt'\r\nconst emitter = mitt()\r\nexport default emitter","<template>\r\n  <div class=\"luckysheet_box\">\r\n    <div id=\"luckysheet\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from \"vue\";\r\nimport { useStore } from \"vuex\";\r\nimport emitter from \"@/unit/mittBus\";\r\n\r\nconst store = useStore()\r\n\r\nconst createLuckysheet = () => {\r\n  let initialOption =\r\n  {\r\n    name: \"Sheet1\",\r\n    color: \"\",\r\n    index: 0,\r\n    status: 1,\r\n    order: 0,\r\n    data: null,\r\n    config: {}\r\n  }\r\n  let excelOptions = store.state.luckyOptions;\r\n  excelOptions.data.push(initialOption);\r\n  luckysheet.create(excelOptions);\r\n}\r\nconst newLuckysheet = () => {\r\n  let initialOption = [\r\n    {\r\n      name: \"Sheet1\",\r\n      color: \"\",\r\n      index: 0,\r\n      status: 1,\r\n      order: 0,\r\n      data: [],\r\n      config: {}\r\n    }]\r\n  let excelOptions = store.state.luckyOptions;\r\n  excelOptions.data = initialOption;\r\n  luckysheet.create(excelOptions);\r\n}\r\nconst handleSetdata = (value) => {\r\n  console.log(value);\r\n  let excelOptions = store.state.luckyOptions;\r\n  excelOptions.data = value;\r\n  luckysheet.create(excelOptions);\r\n}\r\n\r\n// !!! create luckysheet after mounted\r\nonMounted(() => {\r\n  createLuckysheet()\r\n  emitter.on(\"newLucky\", () => {\r\n    newLuckysheet();\r\n  });\r\n  emitter.on(\"setLucky\", (e) => {\r\n    handleSetdata(e);\r\n  });\r\n  emitter.on('refreshLucky', (e) => {\r\n    console.log('123')\r\n    luckysheet.refresh();\r\n  })\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.luckysheet_box {\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: 0px;\r\n  padding: 0px;\r\n\r\n  #luckysheet {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n}\r\n</style>\r\n","import script from \"./Luckysheet.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Luckysheet.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./Luckysheet.vue?vue&type=style&index=0&id=96649be6&lang=scss\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["n","all","Map","on","t","e","i","get","push","set","off","splice","indexOf","emit","slice","map","emitter","mitt","store","useStore","createLuckysheet","initialOption","name","color","index","status","order","data","config","excelOptions","state","luckyOptions","luckysheet","create","newLuckysheet","handleSetdata","value","console","log","onMounted","refresh","__exports__"],"sourceRoot":""}